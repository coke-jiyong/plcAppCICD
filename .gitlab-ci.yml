image: jypark0209/plc-build:latest
#image: ubuntu:20.04 테스트용 이미지

before_script:
  - echo "This is OTACauth for PLC build container."
  - export PATH=$PATH:/home/plcncli
  - mkdir -p $CI_PROJECT_DIR/artifacts


stages:
  - build
  - test


build:
  stage: build
  script:
    - echo "---------- libOTACauth-epc1502.so file build start----------"
    - cd /home/otacauthServer/epc1502/work
    - plcncli new project -n OTACauth
    - cd OTACauth
    - rm -rf src/*
    - cp -r $CI_PROJECT_DIR/* .
    - plcncli set target --add -n EPC1502
    - plcncli build
    - cd /home/otacauthServer/epc1502/work/OTACauth/bin/EPC1502_23.0.6.62/Release/lib
    - mv libOTACauth.so libOTACauth-epc1502.so
    - cp libOTACauth-epc1502.so $CI_PROJECT_DIR/artifacts/

    - echo "---------- libOTACauth-epc1522.so file build start----------"
    - cd /home/otacauthServer/epc1522/work
    - plcncli new project -n OTACauth
    - cd OTACauth
    - rm -rf src/*
    - cp -r $CI_PROJECT_DIR/* .
    - plcncli set target --add -n EPC1522
    - plcncli build
    - cd /home/otacauthServer/epc1522/work/OTACauth/bin/EPC1522_23.0.6.54/Release/lib
    - mv libOTACauth.so libOTACauth-epc1522.so
    - cp libOTACauth-epc1522.so $CI_PROJECT_DIR/artifacts/
    
    - echo "---------- libOTACauth-axcf3152.so file build start----------"
    - cd /home/otacauthServer/axcf3152/work
    - plcncli new project -n OTACauth
    - cd OTACauth
    - rm -rf src/*
    - cp -r $CI_PROJECT_DIR/* .
    - plcncli set target --add -n AXCF3152
    - plcncli build
    - cd /home/otacauthServer/axcf3152/work/OTACauth/bin/AXCF3152_23.0.2.56/Release/lib
    - mv libOTACauth.so libOTACauth-axcf3152.so
    - cp libOTACauth-axcf3152.so $CI_PROJECT_DIR/artifacts/
  artifacts:
    expire_in: 1 day
    paths:
    - artifacts/



check_build:
  stage: test
  script:
    - ls -al artifacts/

variables:
  SAST_DISABLED: "false"

include:
  - template: Security/SAST.gitlab-ci.yml #코드 취약점 점검
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml #sbom 생성 (lock파일 필요)


# sast:
#   stage: security
#   allow_failure: true

# override the dependency scanning job
# gemnasium-dependency_scanning:
#   tags: [ saas-linux-large-amd64 ]
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#     - if: $CI_MERGE_REQUEST_IID



export-merged-sbom:
  before_script:
    - apt-get update
    - apt-get install -y  jq curl dos2unix
    - echo "$PRIVATE_TOKEN"
  stage: .post
  script:
    - |
      curl --header "Authorization: Bearer $PRIVATE_TOKEN" --output export.sh --url "https://gitlab.com/api/v4/snippets/3730445/raw"
    - dos2unix export.sh
    - bash export.sh
  artifacts:
    paths:
      - "gl-sbom-merged-*.cdx.json"



