# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
# before_script:
# - echo "This is OTACauth for PLC build container."

# stages:
# - test
# - trigger_external_project
# - build
# - security

# ".build_job_template":
#   script:
#   - export PATH=$PATH:/home/plcncli
#   - mkdir -p $CI_PROJECT_DIR/artifacts
#   - echo "----------${TARGET} .so file build start----------"
#   - cd /home/work
#   - plcncli new project -n OTACauth
#   - cd OTACauth
#   - rm -rf src/*
#   - cp -r $CI_PROJECT_DIR/* .
#   - plcncli set target --add -n ${TARGET}
#   - plcncli build
#   - cd /home/work/OTACauth/bin/${TARGET}_23.0.${VERSION}/Release/lib
#   - mv libOTACauth.so libOTACauth-${TARGET_LOW}.so
#   - cp libOTACauth-${TARGET_LOW}.so $CI_PROJECT_DIR/artifacts/
#   artifacts:
#     expire_in: 1 day
#     paths:
#     - artifacts/

# api_tests1:
#   stage: test
#   image: node:16
#   before_script:
#   - npm install -g newman
#   script:
#   - newman run API_test.postman_collection.json
#   allow_failure: false

# api_tests2:
#   stage: test
#   image: node:16
#   before_script:
#   - npm install -g newman
#   script:
#   - newman run API_test.postman_collection.json
#   allow_failure: false
#   needs:
#   - api_tests1

# api_tests3:
#   stage: test
#   image: node:16
#   before_script:
#   - npm install -g newman
#   script:
#   - newman run API_test.postman_collection.json
#   allow_failure: false
#   needs:
#   - api_tests2

# build-epc1502:
#   extends: ".build_job_template"
#   stage: build
#   image: jypark0209/plc-build:epc1502
#   variables:
#     TARGET: EPC1502
#     VERSION: 6.62
#     TARGET_LOW: epc1502
#   needs:
#   - api_tests3

# build-epc1522:
#   extends: ".build_job_template"
#   stage: build
#   image: jypark0209/plc-build:epc1522
#   variables:
#     TARGET: EPC1522
#     VERSION: 6.54
#     TARGET_LOW: epc1522
#   needs:
#   - api_tests3

# build-axcf3152:
#   extends: ".build_job_template"
#   stage: build
#   image: jypark0209/plc-build:axcf3152
#   variables:
#     TARGET: AXCF3152
#     VERSION: 2.56
#     TARGET_LOW: axcf3152
#   needs:
#   - api_tests3

# trigger_API_test:
#   stage: trigger_external_project
#   trigger:
#     project: pjy1/c-example

# include:
# - template: Security/SAST.gitlab-ci.yml
# - template: Jobs/Dependency-Scanning.gitlab-ci.yml

# sast:
#   variables:
#     SEARCH_MAX_DEPTH: '10'
#   stage: security
stages:
- build
- test
- export

include:
- template: Jobs/Dependency-Scanning.gitlab-ci.yml

# override the dependency scanning job
gemnasium-dependency_scanning:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_MERGE_REQUEST_IID

export-merged-sbom:
  image: alpine
  stage: export
  before_script:
    - apk add --update jq curl
  script:
    - |
      cat << EOF > export.sh
      #!/bin/sh

      function create_export {
        curl --silent \
        --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" \
        -X 'POST' --data "export_type=sbom" \
        "https://gitlab.com/api/v4/pipelines/$CI_PIPELINE_ID/dependency_list_exports" \
        | jq '.id'
      }

      function check_status {
        curl --silent \
          --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" \
          --write-out "%{http_code}" --output /dev/null \
          https://gitlab.com/api/v4/dependency_list_exports/$1
      }

      function download {
        curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" \
          --output "gl-sbom-merged-$CI_PIPELINE_ID.cdx.json" \
          "https://gitlab.com/api/v4/dependency_list_exports/$1/download"
      }

      function export_sbom {
        local ID=$(create_export)

        for run in $(seq 0 3); do
          local STATUS=$(check_status $ID)
          if [ $STATUS -eq "200" ]; then
            download $ID
            exit 0
          elif [ $STATUS -ne "202" ]; then
            exit 1
          fi

          echo "Waiting for JSON to be generated"
          sleep 5
        done

        exit 1
      }

      export_sbom
      EOF
    - chmod +x export.sh
    - ./export.sh
  artifacts:
    paths:
      - "gl-sbom-merged-*.cdx.json"
